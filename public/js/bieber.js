// Generated by CoffeeScript 1.4.0
var anchorize, bieberFeeder, currentTweets, deduper, feedControl, feedSpeed, getTweets, populateFeed, printTweet, request, startFeed, stopFeed, updateFeed,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  _this = this;

bieberFeeder = 0;

feedSpeed = 5000;

currentTweets = [];

request = function(url, callback) {
  var req;
  req = new XMLHttpRequest();
  req.open('GET', url, true);
  req.addEventListener('load', function(e) {
    if (req.status === 200) {
      console.log('** REQUEST SUCCEEDED **');
      return typeof callback === "function" ? callback(req.responseText) : void 0;
    } else {
      return console.log('something went wrong, check the request status');
    }
  }, false);
  return req.send(null);
};

deduper = function(tweets) {
  var batchIDs, current, deduped, seen, tweet, _i, _len, _ref, _ref1, _ref2, _ref3;
  batchIDs = [];
  deduped = [];
  for (_i = 0, _len = tweets.length; _i < _len; _i++) {
    tweet = tweets[_i];
    if (_ref = tweet.id_str, __indexOf.call(currentTweets, _ref) >= 0) {
      current = true;
    }
    if (_ref1 = tweet.idstr, __indexOf.call(batchIDs, _ref1) >= 0) {
      seen = true;
    }
    if (!((_ref2 = tweet.id_str, __indexOf.call(currentTweets, _ref2) >= 0) || (_ref3 = tweet.id_str, __indexOf.call(batchIDs, _ref3) >= 0))) {
      deduped.push(tweet);
      batchIDs.push(tweet.id_str);
    }
  }
  return deduped;
};

getTweets = function(callback) {
  return request('http://bieber.mattpatenaude.com/feed/wmayner', function(tweetText) {
    return callback(deduper(JSON.parse(tweetText)));
  });
};

printTweet = function(tweet, display) {
  var li, newTweet, _ref, _ref1, _ref2;
  currentTweets.push(tweet.id_str);
  li = document.createElement('li');
  li.className = 'tweet';
  li.id = tweet.id_str;
  li.style.display = "none";
  li.innerHTML = "    <img class='tweet-img' src=" + (((_ref = tweet.user) != null ? _ref.profile_image_url : void 0) || '') + ">    <div class='tweet-content'>      <div class='tweet-header-row'>        <div class='tweet-name'>          <a href='http://www.twitter.com/" + (tweet.user.screen_name || '') + "' target='_blank'>            " + (((_ref1 = tweet.user) != null ? _ref1.name : void 0) || '') + "          </a>        </div>        <div class='tweet-handle'>          @" + (((_ref2 = tweet.user) != null ? _ref2.screen_name : void 0) || '') + "        </div>      </div>      <div class='tweet-text-wrapper'>        <div class='tweet-text'>          " + (anchorize(tweet)) + "        </div>      </div>    </div>";
  newTweet = $('#tweets')[0].insertBefore(li, $('#tweets')[0].firstChild);
  return display($('#' + tweet.id_str));
};

populateFeed = function(callback) {
  return getTweets(function(tweets) {
    var tweet, _i, _len;
    for (_i = 0, _len = tweets.length; _i < _len; _i++) {
      tweet = tweets[_i];
      printTweet(tweet, function(newTweet) {
        return newTweet.fadeIn("normal");
      });
    }
    return typeof callback === "function" ? callback() : void 0;
  });
};

updateFeed = function() {
  console.log("** UPDATING FEED **");
  return getTweets(function(tweets) {
    var lastTweet;
    printTweet(tweets[0], function(newTweet) {
      return newTweet.slideDown("normal");
    });
    lastTweet = $('.tweet').last();
    lastTweet.slideUp("normal", function() {
      return $(this).remove();
    });
    return currentTweets.splice(currentTweets.indexOf(lastTweet.attr('id').toString()), 1);
  });
};

feedControl = function() {
  var control;
  control = $('#control');
  if (control.hasClass('playing')) {
    stopFeed();
    console.log("** PAUSE FEED **");
    control.removeClass('playing');
    return control.addClass('paused');
  } else if (control.hasClass('paused')) {
    updateFeed();
    startFeed();
    console.log("** PLAY FEED **");
    control.removeClass('paused');
    return control.addClass('playing');
  }
};

startFeed = function() {
  return bieberFeeder = setInterval(updateFeed, feedSpeed);
};

stopFeed = function() {
  clearInterval(bieberFeeder);
  return bieberFeeder = 0;
};

$('document').ready(function() {
  $('#container, footer').hide();
  populateFeed($('#container, footer').fadeIn(1500));
  startFeed();
  $('body').keydown(function(e) {
    if (e.which === 80) {
      feedControl();
      return $('#control-info').fadeOut('normal');
    }
  });
  return $('#control').click(feedControl);
});

anchorize = function(tweet) {
  var hashtag, media, quote, re, text, url, userMention, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
  text = tweet.text;
  quote = function(str) {
    return str.replace(/([.*+?^=!:${}()|[\]\/\\])/g, "\\$1");
  };
  if (tweet.entities.urls != null) {
    _ref = tweet.entities.urls;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      url = _ref[_i];
      re = RegExp(quote(url.url), 'g');
      text = text.replace(re, '<a href="' + url.expanded_url + '" target="_blank">' + url.display_url + '</a>');
    }
  }
  if (tweet.entities.user_mentions != null) {
    _ref1 = tweet.entities.user_mentions;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      userMention = _ref1[_j];
      re = RegExp(quote('@' + userMention.screen_name), 'g');
      text = text.replace(re, '<span class=screen-name>@<a href="http://twitter.com/' + userMention.screen_name + '" target="_blank">' + userMention.screen_name + '</a></span>');
    }
  }
  if (tweet.entities.media != null) {
    _ref2 = tweet.entities.media;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      media = _ref2[_k];
      re = RegExp(quote(media.url), 'g');
      text = text.replace(re, '<a href="' + media.expanded_url + '" target="_blank">' + media.display_url + '</a>');
    }
  }
  if (tweet.entities.hashtags != null) {
    _ref3 = tweet.entities.hashtags;
    for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
      hashtag = _ref3[_l];
      re = RegExp(quote('#' + hashtag.text), 'g');
      text = text.replace(re, '<span class=hashtag>#<a href="http://twitter.com/search?q=%23' + hashtag.text + '" target="_blank">' + hashtag.text + '</a></span>');
    }
  }
  re = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
  text.replace(re, function(href) {
    var partial, _ref4;
    partial = (_ref4 = href.length < 10) != null ? _ref4 : {
      href: href.substring(0, 10) + "..."
    };
    return "<a href='" + href + "' target='_blank'>" + partial + "</a>";
  });
  return text;
};
